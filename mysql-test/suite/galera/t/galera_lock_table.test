#
# Test that a LOCK TABLE on the slave will cause the applier thread to block, so no subsequent updates
# are replicated on the slave until UNLOCK TABLE is issued.
#

--source include/galera_cluster.inc

--let $wsrep_sync_wait_orig = `SELECT @@wsrep_sync_wait`

CREATE TABLE t1 (id INT PRIMARY KEY) ENGINE=InnoDB;
CREATE TABLE t2 (id INT PRIMARY KEY) ENGINE=InnoDB;

--connection node_2
--let $wait_condition = SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 't2'
--source include/wait_condition.inc

LOCK TABLE t1 READ;

--connection node_1
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (1);

# We use a separate connection here so that we can SELECT from both tables
# without running into "table t2 was not locked" error.

--let $galera_connection_name = node_2a
--let $galera_server_number = 2
--source include/galera_connect.inc
--connection node_2a
SET SESSION wsrep_sync_wait=0;
SELECT COUNT(*) = 0 FROM t1;
SELECT COUNT(*) = 0 FROM t2;

--connection node_2
UNLOCK TABLES;

--disable_query_log
--eval SET SESSION wsrep_sync_wait=$wsrep_sync_wait_orig;
--enable_query_log

SELECT COUNT(*) = 1 FROM t1;
SELECT COUNT(*) = 1 FROM t2;

DROP TABLE t1;
DROP TABLE t2;

#-------------------------------------------------------------------------------
#
# Use-case: Stimulate a case where-in mysqldump invokes LOCK TABLE FOR BACKUP
#           and start transaction but rely on connection closure for cleanup.
#

--connect node_1a, 127.0.0.1, root, , test, $NODE_MYPORT_1
--connection node_1a
--echo #node-1a
use mysql;
start transaction;
lock tables for backup;
show create table wsrep_cluster;

--connection node_1
--connection node_1
--echo #node-1
#
--disconnect node_1a
#
use mysql;
select count(*) from wsrep_cluster;

#
# Test scenario:
# 1) unload wsrep_provider
# 2) lock tables/instance for backup
# 3) start transaction
# 4) execute statement that causes WSREP transaction rollback, but does not
#    involve any storage engine
# 5) check that backup lock is still present
#

--let $no_backup_locks_txt = No backup locks expected
--let $backup_locks_txt = One backup lock expected

--connection node_2
--let $wsrep_provider_orig = `SELECT @@wsrep_provider`
--let $wsrep_cluster_address_orig = `SELECT @@wsrep_cluster_address`

SET GLOBAL wsrep_provider='none';


--let $assert_text = $no_backup_locks_txt
--let $assert_cond = [SELECT COUNT(*) FROM performance_schema.metadata_locks WHERE OBJECT_TYPE="BACKUP TABLES"] = 0
--source include/assert.inc
LOCK TABLES FOR BACKUP;
--let $assert_text = $backup_locks_txt
--let $assert_cond = [SELECT COUNT(*) FROM performance_schema.metadata_locks WHERE OBJECT_TYPE="BACKUP TABLES"] = 1
--source include/assert.inc
BEGIN;
--error ER_INCORRECT_GLOBAL_LOCAL_VAR
SET GLOBAL log_bin='wrong value';
--error ER_LOCK_DEADLOCK
SELECT COUNT(*) FROM performance_schema.metadata_locks WHERE OBJECT_TYPE='BACKUP TABLES';

--let $assert_text = $backup_locks_txt
--let $assert_cond = [SELECT COUNT(*) FROM performance_schema.metadata_locks WHERE OBJECT_TYPE="BACKUP TABLES"] = 1
--source include/assert.inc
UNLOCK TABLES;
--let $assert_text = $no_backup_locks_txt
--let $assert_cond = [SELECT COUNT(*) FROM performance_schema.metadata_locks WHERE OBJECT_TYPE="BACKUP TABLES"] = 0
--source include/assert.inc

# MySQL transaction is still ongoing, only WSREP transaction was aborted.
# Finish it before reloading wsrep provider.
ROLLBACK;


--let $assert_text = $no_backup_locks_txt
--let $assert_cond = [SELECT COUNT(*) FROM performance_schema.metadata_locks WHERE OBJECT_TYPE="BACKUP LOCK"] = 0
--source include/assert.inc
LOCK INSTANCE FOR BACKUP;
--let $assert_text = $backup_locks_txt
--let $assert_cond = [SELECT COUNT(*) FROM performance_schema.metadata_locks WHERE OBJECT_TYPE="BACKUP LOCK"] = 1
--source include/assert.inc
BEGIN;
--error ER_INCORRECT_GLOBAL_LOCAL_VAR
SET GLOBAL log_bin='wrong value';
--error ER_LOCK_DEADLOCK
SELECT COUNT(*) FROM performance_schema.metadata_locks WHERE OBJECT_TYPE='BACKUP LOCK';

--let $assert_text = $backup_locks_txt
--let $assert_cond = [SELECT COUNT(*) FROM performance_schema.metadata_locks WHERE OBJECT_TYPE="BACKUP LOCK"] = 1
--source include/assert.inc
UNLOCK INSTANCE;
--let $assert_text = $no_backup_locks_txt
--let $assert_cond = [SELECT COUNT(*) FROM performance_schema.metadata_locks WHERE OBJECT_TYPE="BACKUP LOCK"] = 0
--source include/assert.inc

# MySQL transaction is still ongoing, only WSREP transaction was aborted.
# Finish it before reloading wsrep provider.
ROLLBACK;

# Cleanup
--disable_query_log
--eval SET GLOBAL wsrep_provider = '$wsrep_provider_orig';
--eval SET GLOBAL wsrep_cluster_address = '$wsrep_cluster_address_orig';
--enable_query_log
--source include/wait_until_connected_again.inc
--source include/galera_wait_ready.inc

